// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package hello

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PersionServiceClient is the client API for PersionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PersionServiceClient interface {
	CreatePersion(ctx context.Context, in *CreatePersionRequest, opts ...grpc.CallOption) (*CreatePersionResponse, error)
	ReadPersion(ctx context.Context, in *ReadPersionRequest, opts ...grpc.CallOption) (*ReadPersionResponse, error)
	UpdatePersion(ctx context.Context, in *UpdatePersionRequest, opts ...grpc.CallOption) (*UpdatePersionResponse, error)
	DeletePersion(ctx context.Context, in *DeletePersionRequest, opts ...grpc.CallOption) (*DeletePersionResponse, error)
}

type persionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPersionServiceClient(cc grpc.ClientConnInterface) PersionServiceClient {
	return &persionServiceClient{cc}
}

func (c *persionServiceClient) CreatePersion(ctx context.Context, in *CreatePersionRequest, opts ...grpc.CallOption) (*CreatePersionResponse, error) {
	out := new(CreatePersionResponse)
	err := c.cc.Invoke(ctx, "/location.hello.PersionService/CreatePersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *persionServiceClient) ReadPersion(ctx context.Context, in *ReadPersionRequest, opts ...grpc.CallOption) (*ReadPersionResponse, error) {
	out := new(ReadPersionResponse)
	err := c.cc.Invoke(ctx, "/location.hello.PersionService/ReadPersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *persionServiceClient) UpdatePersion(ctx context.Context, in *UpdatePersionRequest, opts ...grpc.CallOption) (*UpdatePersionResponse, error) {
	out := new(UpdatePersionResponse)
	err := c.cc.Invoke(ctx, "/location.hello.PersionService/UpdatePersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *persionServiceClient) DeletePersion(ctx context.Context, in *DeletePersionRequest, opts ...grpc.CallOption) (*DeletePersionResponse, error) {
	out := new(DeletePersionResponse)
	err := c.cc.Invoke(ctx, "/location.hello.PersionService/DeletePersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PersionServiceServer is the server API for PersionService service.
// All implementations must embed UnimplementedPersionServiceServer
// for forward compatibility
type PersionServiceServer interface {
	CreatePersion(context.Context, *CreatePersionRequest) (*CreatePersionResponse, error)
	ReadPersion(context.Context, *ReadPersionRequest) (*ReadPersionResponse, error)
	UpdatePersion(context.Context, *UpdatePersionRequest) (*UpdatePersionResponse, error)
	DeletePersion(context.Context, *DeletePersionRequest) (*DeletePersionResponse, error)
	mustEmbedUnimplementedPersionServiceServer()
}

// UnimplementedPersionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPersionServiceServer struct {
}

func (UnimplementedPersionServiceServer) CreatePersion(context.Context, *CreatePersionRequest) (*CreatePersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePersion not implemented")
}
func (UnimplementedPersionServiceServer) ReadPersion(context.Context, *ReadPersionRequest) (*ReadPersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadPersion not implemented")
}
func (UnimplementedPersionServiceServer) UpdatePersion(context.Context, *UpdatePersionRequest) (*UpdatePersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePersion not implemented")
}
func (UnimplementedPersionServiceServer) DeletePersion(context.Context, *DeletePersionRequest) (*DeletePersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePersion not implemented")
}
func (UnimplementedPersionServiceServer) mustEmbedUnimplementedPersionServiceServer() {}

// UnsafePersionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PersionServiceServer will
// result in compilation errors.
type UnsafePersionServiceServer interface {
	mustEmbedUnimplementedPersionServiceServer()
}

func RegisterPersionServiceServer(s grpc.ServiceRegistrar, srv PersionServiceServer) {
	s.RegisterService(&PersionService_ServiceDesc, srv)
}

func _PersionService_CreatePersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersionServiceServer).CreatePersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/location.hello.PersionService/CreatePersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersionServiceServer).CreatePersion(ctx, req.(*CreatePersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersionService_ReadPersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadPersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersionServiceServer).ReadPersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/location.hello.PersionService/ReadPersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersionServiceServer).ReadPersion(ctx, req.(*ReadPersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersionService_UpdatePersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersionServiceServer).UpdatePersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/location.hello.PersionService/UpdatePersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersionServiceServer).UpdatePersion(ctx, req.(*UpdatePersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersionService_DeletePersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersionServiceServer).DeletePersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/location.hello.PersionService/DeletePersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersionServiceServer).DeletePersion(ctx, req.(*DeletePersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PersionService_ServiceDesc is the grpc.ServiceDesc for PersionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PersionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "location.hello.PersionService",
	HandlerType: (*PersionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePersion",
			Handler:    _PersionService_CreatePersion_Handler,
		},
		{
			MethodName: "ReadPersion",
			Handler:    _PersionService_ReadPersion_Handler,
		},
		{
			MethodName: "UpdatePersion",
			Handler:    _PersionService_UpdatePersion_Handler,
		},
		{
			MethodName: "DeletePersion",
			Handler:    _PersionService_DeletePersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "location/hello/hello_service.proto",
}
