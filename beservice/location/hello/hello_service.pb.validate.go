// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: location/hello/hello_service.proto

package hello

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Persion with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Persion) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Persion with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PersionMultiError, or nil if none found.
func (m *Persion) ValidateAll() error {
	return m.validate(true)
}

func (m *Persion) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for Completed

	// no validation rules for Name

	// no validation rules for Age

	if all {
		switch v := interface{}(m.GetPurchaseDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PersionValidationError{
					field:  "PurchaseDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PersionValidationError{
					field:  "PurchaseDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPurchaseDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PersionValidationError{
				field:  "PurchaseDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDeliveryDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PersionValidationError{
					field:  "DeliveryDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PersionValidationError{
					field:  "DeliveryDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeliveryDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PersionValidationError{
				field:  "DeliveryDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Price

	if len(errors) > 0 {
		return PersionMultiError(errors)
	}

	return nil
}

// PersionMultiError is an error wrapping multiple validation errors returned
// by Persion.ValidateAll() if the designated constraints aren't met.
type PersionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PersionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PersionMultiError) AllErrors() []error { return m }

// PersionValidationError is the validation error returned by Persion.Validate
// if the designated constraints aren't met.
type PersionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PersionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PersionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PersionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PersionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PersionValidationError) ErrorName() string { return "PersionValidationError" }

// Error satisfies the builtin error interface
func (e PersionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPersion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PersionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PersionValidationError{}

// Validate checks the field values on CreatePersionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePersionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePersionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePersionRequestMultiError, or nil if none found.
func (m *CreatePersionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePersionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for Description

	if len(errors) > 0 {
		return CreatePersionRequestMultiError(errors)
	}

	return nil
}

// CreatePersionRequestMultiError is an error wrapping multiple validation
// errors returned by CreatePersionRequest.ValidateAll() if the designated
// constraints aren't met.
type CreatePersionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePersionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePersionRequestMultiError) AllErrors() []error { return m }

// CreatePersionRequestValidationError is the validation error returned by
// CreatePersionRequest.Validate if the designated constraints aren't met.
type CreatePersionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePersionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePersionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePersionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePersionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePersionRequestValidationError) ErrorName() string {
	return "CreatePersionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePersionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePersionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePersionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePersionRequestValidationError{}

// Validate checks the field values on CreatePersionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePersionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePersionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePersionResponseMultiError, or nil if none found.
func (m *CreatePersionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePersionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPersion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePersionResponseValidationError{
					field:  "Persion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePersionResponseValidationError{
					field:  "Persion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPersion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePersionResponseValidationError{
				field:  "Persion",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePersionResponseMultiError(errors)
	}

	return nil
}

// CreatePersionResponseMultiError is an error wrapping multiple validation
// errors returned by CreatePersionResponse.ValidateAll() if the designated
// constraints aren't met.
type CreatePersionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePersionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePersionResponseMultiError) AllErrors() []error { return m }

// CreatePersionResponseValidationError is the validation error returned by
// CreatePersionResponse.Validate if the designated constraints aren't met.
type CreatePersionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePersionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePersionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePersionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePersionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePersionResponseValidationError) ErrorName() string {
	return "CreatePersionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePersionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePersionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePersionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePersionResponseValidationError{}

// Validate checks the field values on ReadPersionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadPersionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadPersionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadPersionRequestMultiError, or nil if none found.
func (m *ReadPersionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadPersionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return ReadPersionRequestMultiError(errors)
	}

	return nil
}

// ReadPersionRequestMultiError is an error wrapping multiple validation errors
// returned by ReadPersionRequest.ValidateAll() if the designated constraints
// aren't met.
type ReadPersionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadPersionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadPersionRequestMultiError) AllErrors() []error { return m }

// ReadPersionRequestValidationError is the validation error returned by
// ReadPersionRequest.Validate if the designated constraints aren't met.
type ReadPersionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadPersionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadPersionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadPersionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadPersionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadPersionRequestValidationError) ErrorName() string {
	return "ReadPersionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadPersionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadPersionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadPersionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadPersionRequestValidationError{}

// Validate checks the field values on ReadPersionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadPersionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadPersionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadPersionResponseMultiError, or nil if none found.
func (m *ReadPersionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadPersionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPersion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReadPersionResponseValidationError{
					field:  "Persion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReadPersionResponseValidationError{
					field:  "Persion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPersion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadPersionResponseValidationError{
				field:  "Persion",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReadPersionResponseMultiError(errors)
	}

	return nil
}

// ReadPersionResponseMultiError is an error wrapping multiple validation
// errors returned by ReadPersionResponse.ValidateAll() if the designated
// constraints aren't met.
type ReadPersionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadPersionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadPersionResponseMultiError) AllErrors() []error { return m }

// ReadPersionResponseValidationError is the validation error returned by
// ReadPersionResponse.Validate if the designated constraints aren't met.
type ReadPersionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadPersionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadPersionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadPersionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadPersionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadPersionResponseValidationError) ErrorName() string {
	return "ReadPersionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadPersionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadPersionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadPersionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadPersionResponseValidationError{}

// Validate checks the field values on UpdatePersionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePersionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePersionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePersionRequestMultiError, or nil if none found.
func (m *UpdatePersionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePersionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for Completed

	if len(errors) > 0 {
		return UpdatePersionRequestMultiError(errors)
	}

	return nil
}

// UpdatePersionRequestMultiError is an error wrapping multiple validation
// errors returned by UpdatePersionRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdatePersionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePersionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePersionRequestMultiError) AllErrors() []error { return m }

// UpdatePersionRequestValidationError is the validation error returned by
// UpdatePersionRequest.Validate if the designated constraints aren't met.
type UpdatePersionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePersionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePersionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePersionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePersionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePersionRequestValidationError) ErrorName() string {
	return "UpdatePersionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePersionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePersionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePersionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePersionRequestValidationError{}

// Validate checks the field values on UpdatePersionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePersionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePersionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePersionResponseMultiError, or nil if none found.
func (m *UpdatePersionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePersionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPersion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePersionResponseValidationError{
					field:  "Persion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePersionResponseValidationError{
					field:  "Persion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPersion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePersionResponseValidationError{
				field:  "Persion",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdatePersionResponseMultiError(errors)
	}

	return nil
}

// UpdatePersionResponseMultiError is an error wrapping multiple validation
// errors returned by UpdatePersionResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdatePersionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePersionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePersionResponseMultiError) AllErrors() []error { return m }

// UpdatePersionResponseValidationError is the validation error returned by
// UpdatePersionResponse.Validate if the designated constraints aren't met.
type UpdatePersionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePersionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePersionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePersionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePersionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePersionResponseValidationError) ErrorName() string {
	return "UpdatePersionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePersionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePersionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePersionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePersionResponseValidationError{}

// Validate checks the field values on DeletePersionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePersionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePersionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePersionRequestMultiError, or nil if none found.
func (m *DeletePersionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePersionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeletePersionRequestMultiError(errors)
	}

	return nil
}

// DeletePersionRequestMultiError is an error wrapping multiple validation
// errors returned by DeletePersionRequest.ValidateAll() if the designated
// constraints aren't met.
type DeletePersionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePersionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePersionRequestMultiError) AllErrors() []error { return m }

// DeletePersionRequestValidationError is the validation error returned by
// DeletePersionRequest.Validate if the designated constraints aren't met.
type DeletePersionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePersionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePersionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePersionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePersionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePersionRequestValidationError) ErrorName() string {
	return "DeletePersionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePersionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePersionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePersionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePersionRequestValidationError{}

// Validate checks the field values on DeletePersionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePersionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePersionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePersionResponseMultiError, or nil if none found.
func (m *DeletePersionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePersionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeletePersionResponseMultiError(errors)
	}

	return nil
}

// DeletePersionResponseMultiError is an error wrapping multiple validation
// errors returned by DeletePersionResponse.ValidateAll() if the designated
// constraints aren't met.
type DeletePersionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePersionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePersionResponseMultiError) AllErrors() []error { return m }

// DeletePersionResponseValidationError is the validation error returned by
// DeletePersionResponse.Validate if the designated constraints aren't met.
type DeletePersionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePersionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePersionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePersionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePersionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePersionResponseValidationError) ErrorName() string {
	return "DeletePersionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePersionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePersionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePersionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePersionResponseValidationError{}
